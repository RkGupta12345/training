currency-service.inr=67
currency-service.usd=3

var itr=db.emps.find();

while(itr.hasNext()){
 var temp=itr.next();
 print(temp.empname+","+temp.empmail);
}



var itr=db.emps.find();

 while(itr.hasNext()){
 var temp=itr.next();

db.emps1.insert({empname:temp.empname ,empmail:temp.empmail});
 }
 
 
 db.createCollection("capColl",{capped:true, size:4000, max:5});
 
 db.capColl.insert({name:"monitor"});
 db.capColl.insert({name:"presenter"});
 db.capColl.insert({name:"charger"});
 db.capColl.insert({name:"mobile"});
 db.capColl.insert({name:"marker"});
 
 db.capColl.insert({name:"bottle"});
 
 db.persons.find({empid: {$gt :101}})
 
 db.emps.find({
 $or:[
 {empid:{$gt:103}},
 {empmail:"rk@gmail.com"}
 ]
 })
 
 db.emps.find({$or:[{empid:{$gt:103}},{empmail:"rk@gmail.com"}]},{_id:0});
 db.emps.find({$or:[{empid:{$gt:103}},{empmail:"rk@gmail.com"}]},{_id:0,empname:1});
 
 db.embed.insert({
 customerid:101,
 name:{
 firstName:"Ravi",
 lastName:"Kumar",
 },
 contact:{
 official:{
 email:"rk@official.com",
 mobile:"3556678",
 },
 personal:{
 email:"rk@gmail.com",
 mobile:"35512233",
 }
 }
 });

db.food.insert({item:"burger", ratings:[4,5,6]});
db.food.insert({item:"dosa", ratings:[7]});
db.food.insert({item:"pizza", ratings:[5,6,8]});
db.food.insert({item:"coffee", ratings:[4,5,9]});

db.emp.insert({
empid:124,
name:{
firstname:"Suman",
lastname:"kumar",
},
address:{
city:"Delhi",
state:"Delhi",
}
})



Day 2::=>

db.emps.update({empsal:{$exists:false}},{$set:{empsal:300000}},{multi:true})

db.emps.update({empid:104},{$set:{empmail:"kumar123@gmail.com"}});

db.emps.update({empname:"ravi"},{$set:{empsal:500000,empmail:"gupta@gmai.com",empid:201}},{upsert:true})

db.emps.update({empid:{$lt:103}},{$unset:{empsal:true}},{multi:true})


db.emps.save({empid:105, empname:"suraj"})

db.emps1.remove({})

db.emps1.remove({empid:102})

var itr=db.emps.find();

while(itr.hasNext()){
//printjson(itr.next());
print(itr.next());
print(tojson(itr.next()));
}

db.emps.find().forEach(printjson);

var itr=db.emps.find();
itr.forEach(printjson);

Index

db.population.find({"state" : "MA"})

db.population.find({"state" : "MA"}).explain("executionStats")

db.population.createIndex({state:1})

db.population.getIndexes();

db.population.find({pop:{$gt:1500}}).explain("executionStats")

db.population.createIndex({state:1,pop:-1})

db.population.find({
state:"MA",
pop:{$gt:1500}
}).explain("executionStats")


db.population.find({
pop:{$gt:1500},
state:"MA"
}).explain("executionStats")

db.population.createIndex({state:-1,pop:1})

db.population.find({
pop:{$gt:1500},
state:"MA"
}).hint({state:1,pop:-1}).explain("executionStats")


db.population.stats();


db.uemps1.createIndex({empid:1},{unique:true})

db.uemps1.save({empid:101},{empname:"Rohit"})

db.semps.save({empname:"Ankit"})
db.semps.save({empname:"Tejaswani",empsal:13455})
db.semps.save({empname:"Ankit",empsal:29078})
db.semps.save({empname:"Shanker",empsal:23876})

//db.semps.find({empsal:{$lt:20000}});

db.semps.find().sort({empsal:-1})

db.semps.createIndex({empsal:1},{sparse:true})
db.semps.find().sort({empsal:1}).hint({empsal:1})

db.ssemps.save({empname:"Ankit"})
db.ssemps.save({empname:"Tejaswani",empsal:13455})
db.ssemps.save({empname:"Ankit",empsal:29078})
db.ssemps.save({empname:"Shanker",empsal:23876})

db.places.createIndex({'loca;on':'2dsphere'})

db.places.find({
  'loca;on':{
  $near: {
$geometry: {
  type:'Point', 
    coordinates:[50.66,50.443]
  },
  $maxDistance:2000000
  }
  }
}).pretty()






db.sentence.insert({"words":"dog"});
db.sentence.insert({"words":"dog cat"});
db.sentence.insert({"words":"cat dog"});
db.sentence.insert({"words":"dog tree cat
running"});
db.sentence.insert({"words":"its always good to have
a dog"});
db.sentence.insert({"words":"dogs and cats play "});
db.sentence.insert({"words":"cat kills rat"});
db.sentence.insert({"words":"cat is cute"});
db.sentence.insert({"words":"dog snouser"});

db.sentence.createIndex({words:"text"})

db.sentence.find({$text:{$search:'snouser cats'}});

db.sentence.find({
  $text:{
     $search:'hello cat & dog'
  }
}, {score:{
       $meta:'textScore'
  }
}).sort({score:{$meta:'textScore'}})



db.sentence.find({
  $text:{
     $search:'dog'
  }
}, {score:{
       $meta:'textScore'
  }
}).sort({score:{$meta:'textScore'}})


db.sentence.find({
  $text:{
     $search:'cat'
  }
}, {score:{
       $meta:'textScore'
  }
}).sort({score:{$meta:'textScore'}})



day 3==>

db.population.aggregate( [
   { $group: { _id: "$state", totalPop: { $sum:
"$pop" } } },
   { $match: { totalPop: { $gte: 10*1000*1000 } } }
] )


1) select state,sum(pop)
2) select state,city,sum(pop)


db.population.aggregate( [
   { $group: { _id: { state: "$state", city: "$city" },
pop: { $sum: "$pop" } } },
   { $group: { _id: "$_id.state", avgCityPop: { $avg:
"$pop" } } }
] )




db.population.aggregate( [
   { $group:
      {
        _id: { state: "$state", city: "$city" },
        pop: { $sum: "$pop" }
} },
   { $sort: { pop: 1 } },
   { $group:
      {
        _id : "$_id.state",
        biggestCity:  { $last: "$_id.city" },
        biggestPop:   { $last: "$pop" },
        smallestCity: { $first: "$_id.city" },
        smallestPop:  { $first: "$pop" }
} }]);



db.colors.insert({name:"green", value:23});
db.colors.insert({name:"blue", value:22});
db.colors.insert({name:"brown", value:33});
db.colors.insert({name:"black", value:43});
db.colors.insert({name:"red", value:29});
db.colors.insert({name:"yellow", value:35});
db.colors.insert({name:"orange", value:26});


var map=function(){
emit(this.name,this.value)   >>>>>>>>>>>map
}


reduce=function(key,value){
var sum=0;
for(var i=0;i<values.length;i++){
sum+=values[i];
}
return sum;                         >>>>>>>>>>>reduce
}



var mitr = db.colors.mapReduce(map,reduce, {out:"Myresult"});

mitr.result;

db.[mitr.result].find();



Cluster===>>  
1)mongod --replSet exrs --logpath ./rs1/rslog.log --dbpath ./rs1 --port 27020 --smallfiles --oplogSize 64

2)mongod --replSet exrs  --dbpath ./rs2 --port 27018  --oplogSize 64

3)mongod --replSet exrs  --dbpath ./rs3 --port 27019 --oplogSize 64

On 4th Terminal==>
mongo --port 27020

rs.status();

config={
_id:"exrs",
members:[
{_id:0, host:"localhost:27020"},
{_id:1, host:"localhost:27018"},
{_id:2, host:"localhost:27019"}
]
}


rs.initiate(config);

rs.status();

show dbs;

use repdb (om primary)

db.emps.insert({})==>insert couple of record

new terminal open==>
mongo --port 27018

to query on secondary
rs.slaveOk();
 
 
 you can shutdown the primary server
 ->db.shutdownServer();
 
 check now some secondary would have become primary
 ->rs.status();
 
==> config.members[0].priority=0;
 
 rs.reconfig(config);
 rs.config();
 
 
 ==>to disable priority==>
 cfg.members[1].priority=6
 
 rs.reconfig(cfg);
 
 rs.conf();
 
 rs.status();